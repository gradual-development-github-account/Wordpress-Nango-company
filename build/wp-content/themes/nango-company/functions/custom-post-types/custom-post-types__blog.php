<?php

/**
 * Связь типа записи и таксономии ( 5 мест )
 *
 *   @register_post_type( 'news', $args );
 *
 *   @register_taxonomy( 'taxnews', array( 'news' ), $args );
 *
 *   'taxonomies' => array('taxnews'),
 *
 *   'rewrite' => array(
 *     'slug' => 'news',
 *
 *   'rewrite' => array(
 *     'slug' => 'taxnews',
 */

register_post_type( $post_type, $args );


// Регистрация пользовательского типа записи:
add_action( 'init', 'register_post_type_Blog', 0 );
function register_post_type_Blog() {
  $args = array(
      'label'  => _x( 'Блог', 'Post Type General Name', 'text_domain' ), // Название пользовательского типа записи во множественном числе. По умолчанию: значение аргумента 'name' массива 'labels'.
      'labels' => array(
          'name' => _x( 'Блог', 'Post Type General Name', 'text_domain' ), // Общее название пользовательского типа записи во множественном числе. Переопределяет значение 'label'. По умолчанию: _x( 'Записи', 'Post Type General Name', 'text_domain' ) или _x( 'Страницы', 'Post Type General Name', 'text_domain' ).
          'singular_name' => _x( 'Пост', 'Post Type Singular Name', 'text_domain' ), // Название пользовательского типа записи в единственном числе. По умолчанию: _x( 'Запись', 'Post Type Singular Name', 'text_domain' ) или _x( 'Страница', 'Post Type Singular Name', 'text_domain' ).
          'add_new' => __( 'Добавить новый пост', 'text_domain' ), // Текст добавления нового объекта типа записи в разделе 'Записи'/'Страницы' в админ-панели. По умолчанию: __( 'Добавить новую', 'text_domain' ).
          'add_new_item' => __( 'Добавить пост', 'text_domain' ), // Текст добавления нового объекта типа записи на странице создания. По умолчанию: __( 'Добавить запись', 'text_domain' ) или __( 'Добавить страницу', 'text_domain' ).
          'edit_item' => __( 'Редактировать пост', 'text_domain' ), // Текст редактирования объекта типа записи на странице редактирования. По умолчанию: __( 'Редактировать запись', 'text_domain' ) или __( 'Редактировать страницу', 'text_domain' ).
          'new_item' => __( 'Новый пост', 'text_domain' ), // Текст новой объекта типа записи. По умолчанию: __( 'Новая запись', 'text_domain' ) или __( 'Новая страница', 'text_domain' ).
          'view_item' => __( 'Просмотреть пост', 'text_domain' ), // Текст просмотра типа записи в админ-баре. По умолчанию: __( 'Просмотреть запись', 'text_domain' ) или __( 'Просмотреть страницу', 'text_domain' ).
          'search_items' => __( 'Поиск постов', 'text_domain' ), // Текст на кнопке поиска объектов данного типа записи. По умолчанию: __( 'Поиск записей', 'text_domain' ) или __( 'Поиск страниц', 'text_domain' ).
          'not_found' => __( 'Постов не найдено', 'text_domain' ), // Текст в случае отрицательного результата поиска объектов данного типа записи. По умолчанию: __( 'Записей не найдено', 'text_domain' ) или __( 'Страниц не найдено', 'text_domain' ).
          'not_found_in_trash' => __( 'Постов в корзине не найдено', 'text_domain' ), // Текст в случае отрицательного результата поиска объектов данного типа записи в корзине. По умолчанию: __( 'Записей в корзине не найдено', 'text_domain' ) или __( 'Страниц в корзине не найдено', 'text_domain' ).
          'parent_item_colon' => null, // Текст при выборе родительской страницы. Данный аргумент применяется только для древовидных типов записи. По умолчанию: __( 'Родительская:', 'text_domain' ).
          'all_items' => __( 'Все посты', 'text_domain' ), // Текст всех объектов типа записи в подменю. По умолчанию: __( 'Все записи', 'text_domain' ) или __( 'Все страницы', 'text_domain' ).
          'archives' => __( 'Архивы постов', 'text_domain' ), // Текст архивов типа записи. По умолчанию: __( 'Архивы записей', 'text_domain' ) или __( 'Архивы страниц', 'text_domain' ).
          'insert_into_item' => __( 'Вставить в пост', 'text_domain' ), // Текст добавления медиафайлов в объект типа записи во вкладке 'Добавить медиазапись'. По умолчанию: __( 'Вставить в запись', 'text_domain' ) или __( 'Вставить в страницу', 'text_domain' ).
          'uploaded_to_this_item' => _x( 'Загружен для:', 'text_domain' ), // Используется при просотре медиафайлов, прикрепленных к данному типу записи. По умолчанию: _x( 'Загружен для:', 'text_domain' ).
          'featured_image' => __( 'Миниатюра поста', 'text_domain' ), // Текст в метабоксе миниатюры на странице редактирования типа записи. По умолчанию: __( 'Миниатюра записи', 'text_domain' ).
          'set_featured_image' => __( 'Задать миниатюру', 'text_domain' ), // Текст для загрузки миниатюры. По умолчанию: __( 'Задать миниатюру', 'text_domain' ).
          'remove_featured_image' => __( 'Удалить миниатюру', 'text_domain' ), // Текст для удаления миниатюры. По умолчанию: __( 'Удалить миниатюру', 'text_domain' ).
          'use_featured_image' => __( 'Использовать миниатюру', 'text_domain' ), // По умолчанию: __( 'Использовать миниатюру', 'text_domain' ).
          'menu_name' => __( 'Блог', 'text_domain' ), // Текст в пункте меню. По умолчанию: значение аргумента 'name'.
          'name_admin_bar' => __( 'Пост', 'text_domain' ), // Текст в админ-баре во вкладке 'Добавить'. По умолчанию: значение аргумента 'singular_name'.
          'items_list' => __( 'Список постов', 'text_domain' ), // Текст Screen reader в заголовке в разделе всех записей/страниц. По умолчанию: __( 'Список записей', 'text_domain' ) или __( 'Список страниц', 'text_domain' ).
          'items_list_navigation' => __( 'Постраничная навигация', 'text_domain' ), // Текст Screen reader для постраничной навигации в разделе всех записей/страниц. По умолчанию: __( 'Постраничная навигация', 'text_domain' ).
          'filter_items_list' => __( 'Фильтр', 'text_domain' ), // Текст Screen reader для фильтра в разделе всех записей/страниц. По умолчанию: __( 'Фильтр', 'text_domain' ).
      ),
      'description' => '', // Короткое описание записи/страницы. По умолчанию: ''.
      'public' => true, // Управление видимостью в админ-панели ('show_in_nav_menus', 'show_ui') и внешнем фронтэнде ('exclude_from_search', 'publicly_queryable'). По умолчанию: false.
      'exclude_from_search' => true, // Исключить ли записи из результатов поиска фронтэнда. По умолчанию: значение аргумента 'public'.
      'publicly_queryable' => true, // Доступность на внешнем сайте: могут ли запросы быть выполненными во фронтэнде как часть parse_request(). По умолчанию: значение аргумента 'public'.
      'show_ui' => true, // Возможность управления данным пользовательским типом записи в админ-панели. По умолчанию: значение аргумента 'public'.
      'show_in_nav_menus' => true, // Доступность данного пользовательского типа записи в навигационном меню сайта. По умолчанию: значение аргумента 'public'.
      'show_in_menu' => true, // Показывать ли тип записи в админ-меню. Значение аргумента 'show_ui' должно быть true. По умолчанию: значение аргумента 'show_ui'.
      'show_in_admin_bar' => true, // Показывать ли тип записи в админ-баре. По умолчанию: значение аргумента 'show_in_menu'.
      'menu_position' => 5, /* Порядок расположения в админ-меню. Значение аргумента 'show_in_menu' должно быть true. По умолчанию: null - после пункта 'Комментарии'.
        Возможные значения:
        5 - после пункта 'Записи';
        10 - после пункта 'Медиафайлы';
        20 - после пункта 'Страницы';
        25 - после пункта 'Комментарии';
        60 - после пункта 'Внешний вид';
        65 - после пункта 'Плагины';
        70 - после пункта 'Пользователи';
        75 - после пункта 'Инструменты';
        80 - после пункта 'Настройки'.
        */
      'menu_icon' => 'dashicons-media-document', // URL для загрузки изображения в админ-меню. По умолчанию: null - используется изображение пункта меню 'Записи'. Ссылки на изображения доступны здесь: https://developer.wordpress.org/resource/dashicons/
    /* Массив полномочий зарегестрированных пользователей для этого типа записи:
    'capability_type' => 'post',
    'capabilities' => array(
        'edit_post' => 'edit_news',
        'read_post' => 'read_news',
        'delete_post' => 'delete_news',
        'edit_posts' => 'edit_news',
        'edit_others_posts' => 'edit_others_news',
        'publish_posts' => 'publish_news',
        'read_private_posts' => 'read_private_news',
        'create_posts' => 'edit_news',
    ),
    */
      'map_meta_cap' => null, // Использовать ли внутренние значения по умолчанию для управления правами. По умолчанию: null.
      'hierarchical' => false, // Является ли тип записи иерархическим (т.е. страницей). Позволяет установливать родительскую страницу. По умолчанию: false.
    // Управление полями для редактирования объекта типа записи. По умолчанию: значения 'title' и 'editor'.
      'supports' => array(
          'title', // Заголовок объекта типа записи.
          'editor', // Редактор контента.
          'author', // Автор.
          'thumbnail', // Миниатюра.
          'excerpt', // Цитата, отрывок.
          'trackbacks', // Отправить обратные ссылки.
          'custom-fields', // Произвольные поля.
          'comments', // Комментарии.
          'revisions', // Сохраняет версии.
          'page-attributes', // Атрибуты.
          'post-formats', // Формат записи.
      ),
      'register_meta_box_cb' => null, // Обеспечивает обратный вызов функции, которая требуется при настройке метабоксов в разделе редактирования. По умолчанию: null.

      /**
       * Привязка таксономий к типу записи
      */
      'taxonomies' => array( 'tax-blog-categories', 'tax-blog-tags' ), // Массив связанных таксономий для данного типа записи. Пользовательскую таксономию необходимо зарегестрировать через функцию register_taxonomy(). По умолчанию: без таксономий.


      'has_archive' => false, // Включает архивы данного типа записи. Будет использоваться значение $post_type как ярлык архива по умолчанию. По умолчанию: false
    // Возможность перезаписи для данного типа записи. Чтобы предотвратить перезапись, используют значение false. По умолчанию: true и значение $post_type используется как ярлык.
      'rewrite' => array(
          'slug' => 'blog', // Текст в ссылке. По умолчанию: значение $post_type.
          'with_front' => false, // Должна ли структура ссылки быть с базовым URL. Пример: если структура ссылки /blog/, то ссылка при соответствующих параметрах 'with_front' выглядит так: false->/news/, true->/blog/news/). По умолчанию: true.
          'feeds' => false, // Должна ли структура постоянных ссылок быть встроена для этого типа записи. По умолчанию: значение 'has_archive'.
          'pages' => true, // Должна ли структура ссылок обеспечена быть постраничной навигацией. По умолчанию: true.
      ),
      'permalink_epmask' => EP_PERMALINK, // Перезаписывает конечное значение. По умолчанию: EP_PERMALINK.
      'query_var' => true, // Задается значение запроса для данного типа записи. По умолчанию: true - задается значение $post_type.
      'can_export' => true, // Возможность данного типа записи быть экспортированным. По умолчанию: true.
      'delete_with_user' => null, // Удалять ли записи данного типа при удалении их автора. По умолчанию: null.
      'show_in_rest' => false, // Представлять ли этот тип записи в REST API. По умолчанию: false.
      'rest_base' => $post_type, // Базовый ярлык данного типа записи когда доступно использование REST API. По умолчанию: значение $post_type.
      '_builtin' => false, // Является ли этот тип записи собственным или встроенным. Рекомендация: не использовать этот аргумент при регистрации собственного типа сообщения. По умолчанию: false.
  );
                      //название типа записи
  register_post_type( 'blog', $args );
}

?>